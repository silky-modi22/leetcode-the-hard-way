 --- 
 description: https://leetcode.com/problems/remove-linked-list-elements/ 
 --- 
 # 0203 - Remove Linked List Elements (Easy) 
  
  ## Problem link  
  https://leetcode.com/problems/remove-linked-list-elements/  
  
  ## Problem Statement 
  Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

** Example 1: ** 
```
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5] 
```
** Example 2: **
```
Input: head = [], val = 1
Output: [] 
```

** Example 3: **
```
Input: head = [7,7,7,7], val = 7
Output: []
 ```

**Constraints:**

The number of nodes in the list is in the range [0, 104].
1 <= Node.val <= 50
0 <= val <= 50 

## Approach: 
we can solve this by using the comcept of pointer 
<Tabs> 
<TabItem value="cpp" label="cpp"> 
<SolutionAuthor name ="@silky-modi22
"/>
   
   ```cpp
 class Solution { 
public: 
    ListNode* removeElements(ListNode* head, int val) 
    { 
    if(!head) return head; 
    ListNode *prev = nullptr, *curr = head; 
    while(curr) { 
    if(curr->val == val) { 
    if(!prev)  head= curr->next;   
        else  prev->next = curr->next;           
    } 
        else 
            prev = curr;
        curr = curr->next; 
        } 
        return head;
        }
};
```
